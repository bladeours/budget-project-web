type Query {
    getAccountsPage(page: Page!, filter: Filter): AccountsPage
    getAccounts(filter: Filter): [Account]
    getAccount(hash: String!): Account

    getTransactionsPage(page: Page!, filter: Filter): TransactionsPage
    getTransaction(hash: String!): Transaction

    getCategoriesPage(page: Page!, filter: Filter): CategoriesPage
    getCategories(filter: Filter): [Category]
    getCategory(hash: String!): Category

    getAmountByCategory(startDate: String!, endDate: String!, income: Boolean!): [CategoryAmount]

    getBudgets(date: String): [BudgetDto]
    getPlannedIncome(date: String): PlannedIncomeDto
}


type Mutation {
    register(authInput: AuthInput!): JwtResponse
    authenticate(authInput: AuthInput!): JwtResponse
    refreshToken: JwtResponse
    logout: Boolean

    addAccount(accountInput: AccountInput!): Account
    deleteAccount(hash: String!, removeSub: Boolean!): Boolean
    updateAccount(hash: String!, accountInput: AccountInput!): Account

    addTransaction(transactionInput: TransactionInput!): Transaction
    deleteTransaction(hash: String!): Boolean
    updateTransaction(hash: String!, transactionInput: TransactionInput!): Transaction

    addCategory(categoryInput: CategoryInput!): Category
    deleteCategory(hash: String!): Boolean
    updateCategory(hash: String!, categoryUpdateInput: CategoryUpdateInput!): Category

    addBudget(budgetInput: BudgetInput!): Budget
    updateBudget(plannedBudget: Float!, hash: String!): Budget
    deleteBudget(hash: String!): Boolean

    addPlannedIncome(plannedIncomeInput: PlannedIncomeInput): PlannedIncome
    updatePlannedIncome(hash: String!, amount: Float!): PlannedIncome
    delete(hash: String!): Boolean
}


input Page {
    number: Int!
    size: Int!
}

enum Currency {
    PLN
    EUR
}

